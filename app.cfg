var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
var ti_sysbios_family_arm_lm4_Timer = xdc.useModule('ti.sysbios.family.arm.lm4.Timer');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "SemaphoreJourNuit";
Program.global.SemaphoreJourNuit = Semaphore.create(0, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "SemaphoreMesure";
Program.global.SemaphoreMesure = Semaphore.create(null, semaphore1Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "SemaphoreBattAutreGrid";
Program.global.SemaphoreBattAutreGrid = Semaphore.create(null, semaphore2Params);
var mailbox0Params = new Mailbox.Params();
mailbox0Params.instance.name = "MailBoxSupervisionAlarm";
Program.global.MailBoxSupervisionAlarm = Mailbox.create(1, 3, mailbox0Params);
var mailbox1Params = new Mailbox.Params();
mailbox1Params.instance.name = "MailBoxDataOtherGrid";
Program.global.MailBoxDataOtherGrid = Mailbox.create(4, 1, mailbox1Params);
var timer0Params = new Timer.Params();
timer0Params.instance.name = "TimerMesure";
timer0Params.period = 10000;
timer0Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
Program.global.TimerMesure = Timer.create(null, "&PeriodicMesure_SWI", timer0Params);
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "ADC_COMP_Handle";
hwi0Params.priority = 33;
Program.global.ADC_COMP_Handle = Hwi.create(31, "&ADC_COMP_ISR_HWI", hwi0Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "UART_CPL_Handle";
hwi1Params.priority = 35;
Program.global.UART_CPL_Handle = Hwi.create(77, "&UART_CPL_ISR_HWI", hwi1Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "ADC_COMP_SWI_Handle";
swi0Params.priority = 3;
Program.global.ADC_COMP_SWI_Handle = Swi.create("&ADC_COMP_SWI", swi0Params);
var swi0Params0 = new Swi.Params();
swi0Params0.instance.name = "ControlFlowSystem_Handle";
swi0Params0.priority = 4;
Program.global.ControlFlowSystem_Handle = Swi.create("&ControlFlowSystem_SWI", swi0Params0);
var swi2Params = new Swi.Params();
swi2Params.instance.name = "ControlCplCom_SWI_Handle";
swi2Params.priority = 2;
Program.global.ControlCplCom_SWI_Handle = Swi.create("&ControlCplCom_SWI", swi2Params);
var task0Params = new Task.Params();
task0Params.instance.name = "TaskMPPT_Handle";
task0Params.priority = -1;
Program.global.TaskMPPT_Handle = Task.create("&TaskMPPT", task0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "TaskCurrentRegulation_Handle";
task1Params.priority = -1;
Program.global.TaskCurrentRegulation_Handle = Task.create("&TaskCurrentRegulation", task1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "TaskLedDriving_Handle";
task2Params.priority = -1;
Program.global.TaskLedDriving_Handle = Task.create("&TaskLedDriving", task2Params);
var task3Params = new Task.Params();
task3Params.instance.name = "TaskBatteryFull_Handle";
task3Params.priority = -1;
Program.global.TaskBatteryFull_Handle = Task.create("&TaskBatteryFull", task3Params);
var task4Params = new Task.Params();
task4Params.instance.name = "TaskDayNight_Handle";
task4Params.priority = 5;
Program.global.TaskDayNight_Handle = Task.create("&TaskDayNight", task4Params);
var task5Params = new Task.Params();
task5Params.instance.name = "TaskAlarm_Handle";
Program.global.TaskAlarm_Handle = Task.create("&TaskAlarm", task5Params);
var task6Params = new Task.Params();
task6Params.instance.name = "TaskPowerManagement_Handle";
task6Params.priority = -1;
Program.global.TaskPowerManagement_Handle = Task.create("&TaskPowerManagement", task6Params);
var timer1Params = new Timer.Params();
timer1Params.instance.name = "TimerSupervision";
timer1Params.period = 500000;
Program.global.TimerSupervision = Timer.create(2, "&SupervisionISR", timer1Params);
LoggingSetup.sysbiosSwiLogging = true;
LoggingSetup.sysbiosSemaphoreLogging = true;
